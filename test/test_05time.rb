# $Id: test_05time.rb 51 2005-12-01 18:37:07Z mks $

$:.unshift './lib'
require 'test/unit'
require 'asn1'

class Asn1Test_Time < Test::Unit::TestCase

  def test_time
    assert_not_nil(p = ASN1::Parser.new)

    time = { :date => 987718268 }   # 2001-04-19 22:11:08 GMT
    assert_not_nil(c = p.parse(' date UTCTime '))

    # One hour ahead
    result = [0x17, 0x11, 0x30, 0x31, 0x30, 0x34, 0x31, 0x39,
              0x32, 0x33, 0x31, 0x31, 0x30, 0x38, 0x2B, 0x30,
              0x31, 0x30, 0x30].pack('C*')
    c.enc_opt = { :timezone => +3600 }
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))

    # 2 hours ahead
    result = [0x17, 0x11, 0x30, 0x31, 0x30, 0x34, 0x32, 0x30,
              0x30, 0x30, 0x31, 0x31, 0x30, 0x38, 0x2b, 0x30,
              0x32, 0x30, 0x30].pack('C*')
    c.enc_opt = { :timezone => +7200 }
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))

    # zulu
    result = [0x17, 0x0D, 0x30, 0x31, 0x30, 0x34, 0x31, 0x39,
              0x32, 0x32, 0x31, 0x31, 0x30, 0x38, 0x5A].pack('C*')
    c.enc_opt = { :time => :utctime }
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))

    # 1 hour ahead
    assert_not_nil(c = p.parse(' date GeneralizedTime '))
    result = [0x18, 0x13, 0x32, 0x30, 0x30, 0x31, 0x30, 0x34, 0x31, 0x39,
              0x32, 0x33, 0x31, 0x31, 0x30, 0x38, 0x2B, 0x30,
              0x31, 0x30, 0x30].pack('C*')
    c.enc_opt = { :timezone => +3600 }
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))

    # 4 hours behind
    result = [0x18, 0x13, 0x32, 0x30, 0x30, 0x31, 0x30, 0x34, 0x31, 0x39,
              0x31, 0x38, 0x31, 0x31, 0x30, 0x38, 0x2D, 0x30,
              0x34, 0x30, 0x30].pack('C*')
    c.enc_opt = { :timezone => -14400 }
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))

    # fractional second
    result = [0x18, 0x17, 0x32, 0x30, 0x30, 0x31, 0x30, 0x34, 0x31,
              0x39, 0x32, 0x33, 0x31, 0x31, 0x30, 0x38,
              0x2E, 0x35, 0x30, 0x30, 0x2B, 0x30, 0x31, 0x30, 0x30].pack('C*')
    c.enc_opt = { :timezone => +3600 }
    time[:date] += 0.5
    assert_equal(result, c.encode(time))
    assert_equal(time, c.decode(result))
  end

end
